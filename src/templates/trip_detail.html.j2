<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>Detalle del viaje {{ trip_id }}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta rel="robots" content="noindex, nofollow">
    <link rel="stylesheet" href="https://fonts.bunny.net/css?family=inter:300,400,700">
    <style>
        body {
            font-family: 'Inter', 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: #fff;
            margin: 0 auto;
            max-width: 800px;
            padding: 1.5rem;
        }
        h1 {
            text-align: center;
            font-size: 1.5rem;
            margin-bottom: 1rem;
        }
        .meta {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #666;
        }
        .trip-table {
            width: 100%;
            border-collapse: collapse;
            margin-bottom: 2rem;
        }
        .trip-table th, .trip-table td {
            border: 1px solid #ddd;
            padding: 0.5rem 0.7rem;
            text-align: left;
        }
        .trip-table th {
            background: #f5f5f5;
        }
        .trip-table tr:nth-child(even) {
            background: #fafafa;
        }
        #map {
            width: 100%;
            height: 350px;
            margin-bottom: 2rem;
            border-radius: 8px;
            border: 1px solid #ddd;
            position: relative;
        }
        #map.fullscreen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100vw !important;
            height: 100vh !important;
            z-index: 9999;
            border-radius: 0;
            margin: 0;
        }
        .loading-indicator {
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background: rgba(255, 255, 255, 0.9);
            padding: 10px 20px;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0,0,0,0.2);
            z-index: 1001;
            display: none;
        }
        .footer {
            margin-top: 2rem;
            text-align: center;
            color: #888;
            font-size: 0.95rem;
        }
        .back-link {
            display: inline-block;
            margin-bottom: 1.5rem;
            color: #0074d9;
            text-decoration: none;
        }
        .back-link:hover {
            text-decoration: underline;
        }
        .arrow-icon {
            color: #FFFFFF;
            filter: drop-shadow(0 0 2px rgba(0, 0, 0, 0.7)) !important;

            font-family: 'Arial', sans-serif !important;
            font-size: 18px !important;
            font-weight: 900 !important;
            display: flex !important;
            align-items: center !important;
            justify-content: center !important;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.css" />
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
    <link rel="preload" as="script" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js">
    <link rel="preload" as="script" href="https://unpkg.com/leaflet-polylinedecorator@1.6.0/dist/leaflet.polylineDecorator.js">
    <link rel="preload" as="script" href="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js">
</head>
<body>
    <a class="back-link" href="../index.html">&larr; Volver a servicios</a>
    <h1>Detalle del viaje {{ trip_id }}</h1>
    <div class="meta">
        Ruta: <span style="font-weight:bold; color: #{{ route_color|default('333') }}">{{ route_short_name }}</span>
    </div>
    <div id="map">
        <div class="loading-indicator" id="loading-indicator">Cargando...</div>
    </div>
    <table class="trip-table">
        <thead>
            <tr>
                <th>#</th>
                <th>Parada</th>
                <th>Hora llegada</th>
                <th>Hora salida</th>
            </tr>
        </thead>
        <tbody>
            {% for stop in stop_sequence %}
            <tr>
                <td>{{ loop.index }}</td>
                <td>{{ stop.stop_name }}</td>
                <td>{{ stop.arrival_time }}</td>
                <td>{{ stop.departure_time }}</td>
            </tr>
            {% endfor %}
        </tbody>
    </table>
    <div class="footer">
        Generado con fecha {{ generated_at.strftime('%Y-%m-%d %H:%M:%S %Z') }}
    </div>
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
    <script src="https://unpkg.com/leaflet-polylinedecorator@1.6.0/dist/leaflet.polylineDecorator.js"></script>
    <script src="https://unpkg.com/leaflet.locatecontrol/dist/L.Control.Locate.min.js"></script>

    <script>
    const stops = [
        {%- for stop in stop_sequence %}
        [{{ loop.index }}, "{{ stop.stop_name }}", {{ stop.stop_lat }}, {{ stop.stop_lon }}]{% if not loop.last %},{% endif %}
        {%- endfor %}
    ];
    
    const shapeId = {{ ("'" + shape_id + "'") if shape_id else "null" }};

    (() => {    
        if (stops.length == 0) {
            document.getElementById('map').innerHTML = '<div style="text-align:center;color:#888;padding:2em;">No hay coordenadas para mostrar el mapa.</div>';
            return;
        }

        // --- Layer persistence logic ---
        const LAYER_KEY = 'gtfs_trip_map_last_layer';
        const tileLayers = {
            'Voyager': L.tileLayer('https://{s}.basemaps.cartocdn.com/rastertiles/voyager/{z}/{x}/{y}@2x.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors, © CartoDB'
            }),
            'Positron': L.tileLayer('https://{s}.basemaps.cartocdn.com/light_all/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors, © CartoDB'
            }),
            'IGN Base': L.tileLayer('https://tms-ign-base.idee.es/1.0.0/IGNBaseTodo/{z}/{x}/{-y}.jpeg', {
                maxZoom: 19,
                attribution: '© Instituto Geográfico Nacional de España, © IGN Base Todo'
            }),
            'IGN Satélite': L.tileLayer('https://tms-pnoa-ma.idee.es/1.0.0/pnoa-ma/{z}/{x}/{-y}.jpeg', {
                maxZoom: 19,
                attribution: '© Instituto Geográfico Nacional de España, © PNOA-MA'
            }),
            'OpenStreetMap': L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
                maxZoom: 19,
                attribution: '© OpenStreetMap contributors'
            }),
        };
        // Determine which layer to use by default
        let defaultLayerName = localStorage.getItem(LAYER_KEY) || 'Voyager';
        let defaultLayer = tileLayers[defaultLayerName] || tileLayers['Voyager'];

        // Initialize the map with custom control positions
        const map = L.map('map', {
            zoomControl: false,
            layers: [defaultLayer]
        }).setView([stops[0][2], stops[0][3]], 14);

        L.control.zoom({ position: 'topright' }).addTo(map);

        // Add layer control and listen for changes
        const layersControl = L.control.layers(tileLayers, null, { position: 'bottomleft' }).addTo(map);
        map.on('baselayerchange', function(e) {
            localStorage.setItem(LAYER_KEY, e.name);
        });

        L.control.locate({
            position: 'topright',
            flyTo: true,
            keepCurrentZoomLevel: true,
            showCompass: true,
            strings: { title: 'Mi ubicación' }
        }).addTo(map);
        
        // Create stop markers pane (always on top)
        map.createPane('topMarkers');
        map.getPane('topMarkers').style.zIndex = 650;

        // Add stop markers
        const stopMarkers = [];
        stops.forEach((coord, idx) => {
            const marker = L.circleMarker([coord[2], coord[3]], {
                radius: 6, 
                color: '#0074d9', 
                fillColor: '#fff', 
                fillOpacity: 1, 
                weight: 2, 
                pane: 'topMarkers'
            }).addTo(map).bindPopup(coord[1]);
            stopMarkers.push(marker);
        });
        // Show shape if available, else fit bounds to stops
        if (shapeId) {
            const loadingIndicator = document.getElementById('loading-indicator');
            const loadShape = async () => {
                try {
                    loadingIndicator.style.display = 'block';
                    const response = await fetch(`../shapes/${shapeId}.geojson`);
                    if (!response.ok) throw new Error(`HTTP ${response.status}`);
                    const shapeData = await response.json();
                    if (shapeData.geometry && shapeData.geometry.coordinates) {
                        const shapeCoords = shapeData.geometry.coordinates.map(coord => [coord[1], coord[0]]);
                        const shapePolyline = L.polyline(shapeCoords, {
                            color: '#{{ route_color|default('0074d9') }}',
                            weight: 5,
                            opacity: 0.9
                        }).addTo(map);
                        const shapeOutline = L.polyline(shapeCoords, {
                            color: '#000000',
                            weight: 7,
                            opacity: 0.6
                        }).addTo(map);
                        map.fitBounds(shapePolyline.getBounds(), {padding: [20, 20]});
                    }
                } catch (error) {
                    console.warn('Could not load shape data:', error);
                    // fallback to stops
                    const initialBounds = L.latLngBounds(stops.map(s => [s[2], s[3]]));
                    map.fitBounds(initialBounds, {padding: [20, 20]});
                } finally {
                    loadingIndicator.style.display = 'none';
                }
            };
            loadShape();
        } else {
            const initialBounds = L.latLngBounds(stops.map(s => [s[2], s[3]]));
            map.fitBounds(initialBounds, {padding: [20, 20]});
        }
        
    })();
    </script>
</body>
</html>
